#include <SFML/Graphics.hpp>
#include <iostream>
#include <fstream>
#include<sstream>
#include <vector>
#include <string>


//the player TV is 1080 X 1920 as its set long ways. This makes it the same size as the tv so it makes it pretty much fullscreen and covers up the bar.
double Player_Window_X = 1080.0;
double Player_Window_Y = 1920.0;
//this is the position of the Player View
double Player_Window_Pos_X = 0.0;
double Player_Window_Pos_Y = 0.0;

double DM_Window_X = 1000.0;
double DM_Window_Y = 1000.0;


bool KeepRunning = true;


double textclock = 0.0;
double textclock_increase = 0.005;
bool consoleonoff = false;

double ConsoleWidth = 20;
double ConsoleHeight = 20;


bool consolemode = false;
std::string Console_Input = "";
std::string Console_Search = "Nothing";

int main()
{
    //the code below creates a rectangle shape and sets it to a texture.
    sf::RectangleShape FullScreenShape(sf::Vector2f(1080.f, 1920.f));
    sf::Texture MaiEsse;
    MaiEsse.loadFromFile("Pictures/MaiEsseMapsCombined.png");
    FullScreenShape.setTexture(&MaiEsse);


    //this code is for impomptu map inputs (i might faze this out)




    






    //this renders the 2 windows, one for DM view and one for Player view. Player view has no movable border
    sf::RenderWindow DM_View(sf::VideoMode(DM_Window_X, DM_Window_Y), "Dungeon Master View");
    sf::RenderWindow Player_View(sf::VideoMode(Player_Window_X, Player_Window_Y), "Player View", sf::Style::None);



    //taking file as inputstream
    std::ifstream f("PlayerWindowResolution.txt"); 
    std::string str;
    if (f) {
        std::ostringstream ss;
        ss << f.rdbuf(); // reading data
        str = ss.str();
    }
    //std::cout << str << '\n';

    //these values should hopefully put the player window right where it should be on my screen.
    Player_Window_Pos_X = 832;
    Player_Window_Pos_Y = 1080;



    // <Font>

    sf::Font font;
    if (!font.loadFromFile("fonts/arial.ttf"))
    {
        // error...
    }

    // <Font>
  




    //here is the main start loop for the main program.
    while (KeepRunning == true)
    {
        //myclock
        textclock = textclock + textclock_increase;



        sf::Text Console_View;
        Console_View.setFont(font);
        Console_View.setString(Console_Input);
        Console_View.setCharacterSize(30);
        Console_View.setFillColor(sf::Color::Black);
        //Console_View.setStyle(sf::Text::Bold);
        ConsoleWidth = Console_View.getLocalBounds().width;
        ConsoleHeight = Console_View.getLocalBounds().height;
        //Console.setOrigin((textwidth / 2), (textheight / 2));
        Console_View.setPosition(10, 900);



        //Without these events, both the player and DM window freeze and are unable to be interacted with.
        sf::Event event;
        while (DM_View.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                DM_View.close();
        }
        sf::Event event2;
        while (Player_View.pollEvent(event2))
        {
            if (event2.type == sf::Event::Closed)
                Player_View.close();
        }

     


        if ((sf::Keyboard::isKeyPressed(sf::Keyboard::Tilde)) & (textclock > 1.0) & (consolemode == false))
        {
            consolemode = true;
            textclock = 0.0;
            std::cout << "consolemodeon" << std::endl;
        }
        if ((sf::Keyboard::isKeyPressed(sf::Keyboard::Tilde)) & (textclock > 1.0) & (consolemode == true))
        {
            consolemode = false;
            textclock = 0.0;
            std::cout << "consolemodeoff" << std::endl;
        }



        if (consolemode == true)
        {
            


            //all the keyboard inputs for letters
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::Backspace)) & (textclock > 1))
            {
                Console_Input = "";
                textclock = 0;
            }

            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::Q)) & (textclock > 1))
            {
                Console_Input = Console_Input + "Q";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::W)) & (textclock > 1))
            {
                Console_Input = Console_Input + "W";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::E)) & (textclock > 1))
            {
                Console_Input = Console_Input + "E";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::R)) & (textclock > 1))
            {
                Console_Input = Console_Input + "R";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::T)) & (textclock > 1))
            {
                Console_Input = Console_Input + "T";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::Y)) & (textclock > 1))
            {
                Console_Input = Console_Input + "Y";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::U)) & (textclock > 1))
            {
                Console_Input = Console_Input + "U";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::I)) & (textclock > 1))
            {
                Console_Input = Console_Input + "I";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::O)) & (textclock > 1))
            {
                Console_Input = Console_Input + "O";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::P)) & (textclock > 1))
            {
                Console_Input = Console_Input + "P";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::A)) & (textclock > 1))
            {
                Console_Input = Console_Input + "A";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::S)) & (textclock > 1))
            {
                Console_Input = Console_Input + "S";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::D)) & (textclock > 1))
            {
                Console_Input = Console_Input + "D";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::F)) & (textclock > 1))
            {
                Console_Input = Console_Input + "F";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::G)) & (textclock > 1))
            {
                Console_Input = Console_Input + "G";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::H)) & (textclock > 1))
            {
                Console_Input = Console_Input + "H";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::J)) & (textclock > 1))
            {
                Console_Input = Console_Input + "J";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::K)) & (textclock > 1))
            {
                Console_Input = Console_Input + "K";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::L)) & (textclock > 1))
            {
                Console_Input = Console_Input + "L";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::Z)) & (textclock > 1))
            {
                Console_Input = Console_Input + "Z";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::X)) & (textclock > 1))
            {
                Console_Input = Console_Input + "X";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::C)) & (textclock > 1))
            {
                Console_Input = Console_Input + "C";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::V)) & (textclock > 1))
            {
                Console_Input = Console_Input + "V";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::B)) & (textclock > 1))
            {
                Console_Input = Console_Input + "B";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::N)) & (textclock > 1))
            {
                Console_Input = Console_Input + "N";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::M)) & (textclock > 1))
            {
                Console_Input = Console_Input + "M";
                textclock = 0;
                std::cout << Console_Input << std::endl;

            }
            //all the keyboard inputs for letters




            if ((sf::Keyboard::isKeyPressed(sf::Keyboard::Enter)) & (textclock > 1))
            {

                if (Console_Input == "TEST")
                {
                    Console_Input = "";
                    textclock = 0;
                    std::cout << "TESTWORKS" << std::endl;
                }
                if (Console_Input == "QUIT")
                {
                    KeepRunning = false;
                }


            }









            /// This is for moving the player window around
          
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::LControl))
            {
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up))
                {
                    Player_Window_Pos_Y = Player_Window_Pos_Y - 0.1;
                }
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down))
                {
                    Player_Window_Pos_Y = Player_Window_Pos_Y + 0.1;
                }
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left))
                {
                    Player_Window_Pos_X = Player_Window_Pos_X - 0.1;
                }
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right))
                {
                    Player_Window_Pos_X = Player_Window_Pos_X + 0.1;
                }
            }

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::LShift))
            {
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up))
                {
                    Player_Window_Pos_Y = Player_Window_Pos_Y - 0.01;
                }
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down))
                {
                    Player_Window_Pos_Y = Player_Window_Pos_Y + 0.01;
                }
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left))
                {
                    Player_Window_Pos_X = Player_Window_Pos_X - 0.01;
                }
                if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right))
                {
                    Player_Window_Pos_X = Player_Window_Pos_X + 0.01;
                }

                if (sf::Keyboard::isKeyPressed(sf::Keyboard::Enter))
                {

                    std::cout << "X= " << Player_Window_Pos_X << " Y= " << Player_Window_Pos_Y << std::endl;

                }
            }
            /// This is for moving the player window around






            
        }


               Player_View.setPosition(sf::Vector2i(Player_Window_Pos_X, Player_Window_Pos_Y));


               

               

        DM_View.clear();
        
        DM_View.draw(FullScreenShape);
        DM_View.draw(Console_View);
        DM_View.display();

        Player_View.clear();
        Player_View.draw(FullScreenShape);
        Player_View.display();

       


        
    }





	return 0;
}


